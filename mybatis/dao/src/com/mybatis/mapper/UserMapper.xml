<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间,隔离sql,进行分类管理
注意: 使用mapper代理方法开发,namespace有特别重要的作用,namespace等于mapper接口的地址
-->
<mapper namespace="com.mybatis.mapper.UserMapper">
    <!-- 通过select标签执行数据库的查询
        id : 标识映射文件中的sql,成为statement的id,将sql封装到mappedStatement对象中
        parameterType:指定输入参数类型
        resultTYpe:指定sql输出结果所映射的java对象
        #{}表示一个占位符
        #{id}表示接收输入的参数,参数名称为id,如果输入的简单类型,#{}中的参数名可以任意

    -->
    <select id="findUserById" parameterType="int" resultType="User">
        SELECT * FROM USER WHERE ID=#{id}
    </select>

    <!-- 返回多条记录 resultType仍为User
        ${}:表示拼接sql串,将接受到的参数的内容任何修饰拼接在sql中. #{}:是表示字符串,会使用''包含
        使用${}拼接sql会引起sql注入
        ${value}: 接受输入参数类型,如果传入类型是简单类型,${}中只能使用${value}
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="User">
        SELECT * FROM USER WHERE username LIKE '%${value}%'
    </select>

    <!-- 添加用户
        parameterType: 指定输入参数类型是pojo(包括用户信息)
        #{}中指定pojod的属性名,接收到pojo对象的属性值,mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUser" parameterType="User">
        <!-- 将插入数据的主键返回,返回到User对象中
            SELECT LAST_INSERT_ID(): 得到刚insert进去的主键值,只使用于自增主键
            keyProperty: 将查询到的主键值设置到parameterType中的哪个属性值
            order: 相对于insert的执行顺序
            resultType: 指定返回属性的类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
          SELECT LAST_INSERT_ID()
        </selectKey>

        INSERT INTO user(username,birthday,sex,address) value(#{username},#{birthday},#{sex},#{address})
    </insert>

    <!-- 删除用户
        根据id删除用户,需要输入id值
    -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id}
    </delete>

    <!-- 更新用户
        需要传入用户id和更新信息(id必须存在)
    -->
    <update id="updateUser" parameterType="User">
        UPDATE USER SET username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
    </update>

    <!-- 用户信息的综合查询 -->
    <select id="findUserList" parameterType="UserQueryVo" resultType="UserCustom">
        SELECT * FROM USER
        <where>
            <include refid="query_user_where"></include>
        </where>

    </select>

    <!-- 定义resultMap
    type: resultMap最终映射的java对象类型,可以使用别名
    id: 对resultMap的唯一标识
    -->
    <resultMap id="userResultMap" type="user">
        <!-- id表示查询结果集合中唯一标识
        column: 查询出来的列名
        property: type指定的pojo类型中的属性名
        -->
        <id column="id_" property="id" />
        <!-- result:对普通名映射定义
        column: 查询出来的列名
        property: type指定的pojo类型中的属性名
        -->
        <result column="username_" property="username" />

    </resultMap>
    <!-- 使用resultMap进行输出映射
     如果resultMap在其他mapper文件中,需要加namespace前缀
    -->
   <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
       SELECT id id_,username username_ FROM USER WHERE id=#{value}<!-- 执行得到的列名为id_和username_,通过resultMap映射为id和resultMap -->
   </select>

    <!-- sql片段
    id: sql片段的唯一标识
    经验: 是基于单表来定义sql片段,这样的话,sql片段的可重用性才高
    在sql片段中一般不要包括where
    -->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                and user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and user.username like '%${userCustom.username}%'
            </if>
            <!-- AND ( id=1 OR id=10 OR id=16) -->
            <if test="ids!=null">
                <foreach collection="ids" item="user_id" open="AND (" close=")" separator="or">
                    id=#{user_id}
                </foreach>
            </if>
        </if>
    </sql>

</mapper>